#!/usr/bin/env node
/* eslint strict: 0 */

'use strict'

//

/**
 * Module dependencies.
 */

// Enables ES6 ('import'.. etc) in Node
require('babel-core/register')
require('babel-polyfill')
const config = require('../config').default
const app = require('../app').default
const debug = require('debug')('reports:server')
const http = require('http')


/**
 * Get port from environment and store in Express.
 */
const {host, port} = config.server
app.set('port', port)
app.set('address', host)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host)

/**
 * Event listener for HTTP server "error" event.
 */

server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`

  // Handle specific listen errors with friendly messages
  /* eslint no-process-exit: 0 */
  switch (error.code) {
    case 'EACCES':
      debug(`${bind} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      debug(`${bind} is already in use`)
      process.exit(1)
      break
    default:
      throw error
  }
})

/**
 * Event listener for HTTP server "listening" event.
 */

server.on('listening', () => {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`
  debug(`Listening on ${bind}`)
})
